{"version":3,"sources":["components/layouts/MetaData/Metadata.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/EmojiOptions.js","img/img.jpg","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js"],"names":["MataData","_ref","title","_jsx","Helmet","children","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","name","createdAt","user","Date","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","timeZone","format","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_jsxs","_Fragment","onClick","IconButton","icon","ViewIcon","bg","color","pos","top","right","className","Modal","size","isCentered","ModalOverlay","ModalContent","h","w","pt","pb","ModalCloseButton","ModalBody","d","alignItems","justifyContent","Avatar","borderRadius","width","height","src","pic","alt","mr","Flex","direction","Text","fontSize","mt","toString","substring","email","fontWeight","ScrollableChat","ChatState","ScrollableFeed","map","style","display","Tooltip","label","placement","hasArrow","cursor","backgroundColor","concat","marginLeft","marginTop","padding","maxWidth","content","EmojiOptions","handleEmojiClick","emojis","useState","showOptions","setShowOptions","emoji","index","marginRight","handleClick","UserBadgeItem","handleFunction","admin","Badge","px","py","mb","variant","colorScheme","background","boxShadow","_hover","transform","CloseIcon","pl","UserListItem","Box","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","setLoading","renameloading","setRenameLoading","isUserList","setUserList","toast","useToast","selectedChat","setSelectedChat","handleAddUser","async","find","u","user1","status","duration","isClosable","position","groupAdmin","data","axios","put","chatId","error","description","response","message","handleRemove","console","log","config","headers","base","overflowY","ModalHeader","fontFamily","p","textShadow","chatName","flexDir","flexWrap","FormControl","Input","placeholder","_placeholder","value","onChange","e","target","Button","md","lg","isLoading","Authorization","token","query","get","handleSearch","Spinner","ModalFooter","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","notification","setNotification","showEmojiOptions","setShowEmojiOptions","emit","sendMessage","event","key","post","useEffect","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","backgroundImage","bgSize","alignSelf","margin","onKeyDown","id","isRequired","Lottie","options","marginBottom","InputGroup","lastTypingTime","getTime","setTimeout","_focus","pr","InputRightElement","EmojiEmotionsIcon","handleToggleEmojiOptions","prevState","Send","prevMessage","getSenderFull","Chatbox","borderColor","borderWidth","ChatLoading","Stack","Array","_","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","chats","setChats","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","JSON","stringify","MyChats","setLoggedUser","parse","localStorage","getItem","fetchChats","rightIcon","AddIcon","latestMessage","SideDrawer","loadingChat","setLoadingChat","setIsAuth","history","useHistory","bgGradient","_active","textTransform","bgClip","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","MenuItem","notif","n","as","ChevronDownIcon","border","shadow","textAlign","MenuDivider","EditIcon","boxSize","DeleteIcon","SettingsIcon","logoutHandler","removeItem","push","ExternalLinkIcon","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","myuser","c","accessChat","ml","Chatpage","MetaData"],"mappings":"sGAAA,yBAUeA,IARf,SAAiBC,GAAa,IAAZ,MAAEC,GAAOD,EACzB,OACEE,cAACC,IAAM,CAAAC,SACLF,cAAA,SAAAE,SAAQH,KAGd,C,2jMCRO,MAAMI,EAAqBA,CAACC,EAAUC,EAAGC,EAAGC,IAI/CD,EAAIF,EAASI,OAAS,GACtBJ,EAASE,EAAI,GAAGG,OAAOC,MAAQL,EAAEI,OAAOC,KACxCN,EAASE,GAAGG,OAAOC,MAAQH,EAEpB,GAEND,EAAIF,EAASI,OAAS,GACrBJ,EAASE,EAAI,GAAGG,OAAOC,MAAQL,EAAEI,OAAOC,KACxCN,EAASE,GAAGG,OAAOC,MAAQH,GAC5BD,IAAMF,EAASI,OAAS,GAAKJ,EAASE,GAAGG,OAAOC,MAAQH,EAElD,EACG,OAGDI,EAAeA,CAACP,EAAUC,EAAGC,EAAGC,IAEzCD,EAAIF,EAASI,OAAS,IACrBJ,EAASE,EAAI,GAAGG,OAAOC,MAAQL,EAAEI,OAAOC,UACRE,IAA/BR,EAASE,EAAI,GAAGG,OAAOC,MACzBN,EAASE,GAAGG,OAAOC,MAAQH,EAIlBM,EAAgBA,CAACT,EAAUE,EAAGC,IAEvCD,IAAMF,EAASI,OAAS,GACxBJ,EAASA,EAASI,OAAS,GAAGC,OAAOC,MAAQH,GAC7CH,EAASA,EAASI,OAAS,GAAGC,OAAOC,IAI5BI,EAAaA,CAACV,EAAUC,EAAGC,IAC/BA,EAAI,GAAKF,EAASE,EAAI,GAAGG,OAAOC,MAAQL,EAAEI,OAAOC,IAG7CK,EAAYA,CAACC,EAAYC,IAC7BA,EAAM,GAAGP,MAAQM,EAAWN,IAAMO,EAAM,GAAGC,KAAOD,EAAM,GAAGC,KASvDC,EAAaC,IAC1B,MAAMD,EAAY,IAAIE,KAAKD,EAAKD,WAahC,OAFkB,IAAIG,KAAKC,eAAe,QAV1B,CACdC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,QAAQ,EACRC,SAAU,iBAIoBC,OAAOZ,EACnB,E,uECkBLa,MA/DMlC,IAAyB,IAAxB,KAAEsB,EAAI,SAAElB,GAAUJ,EAEtC,MAAM,OAAEmC,EAAM,OAAEC,EAAM,QAAEC,GAAYC,cAEtC,OACEC,eAAAC,WAAA,CAAApC,SAAA,CACGA,EACCF,cAAA,QAAMuC,QAASL,EAAOhC,SAAEA,IAExBF,cAACwC,IAAU,CACTC,KAAMzC,cAAC0C,IAAQ,IACfH,QAASL,EACTS,GAAG,MACHC,MAAM,QACNC,IAAI,WACJC,IAAK,EACLC,MAAO,EACPC,UAAU,iBAGdX,eAACY,IAAK,CAACC,KAAK,MAAMf,QAASA,EAASF,OAAQA,EAAQkB,YAAU,EAAAjD,SAAA,CAC5DF,cAACoD,IAAY,IACbf,eAACgB,IAAY,CACXC,EAAE,OACFC,EAAE,OACFZ,GAAG,UACHC,MAAM,UACNY,GAAI,EACJC,GAAI,EAAEvD,SAAA,CAENF,cAAC0D,IAAgB,CAACd,MAAM,UAAUC,IAAI,WAAWC,IAAK,EAAGC,MAAO,IAChEV,eAACsB,IAAS,CAACC,EAAE,OAAOC,WAAW,SAASC,eAAe,SAASd,UAAU,eAAc9C,SAAA,CACtFF,cAAC+D,IAAM,CACLb,KAAK,KACLc,aAAa,KACbC,MAAM,QACNC,OAAO,QACPC,IAAK/C,EAAKgD,IACVC,IAAKjD,EAAKF,KACVoD,GAAI,IAENjC,eAACkC,IAAI,CAACC,UAAU,SAASX,WAAW,aAAY3D,SAAA,CAC9CmC,eAACoC,IAAI,CAACC,SAAS,SAASC,GAAI,EAAEzE,SAAA,CAAC,OACxBkB,EAAKV,IAAIkE,WAAWC,UAAU,EAAG,MAExCxC,eAACoC,IAAI,CAACC,SAAS,SAASC,GAAI,EAAEzE,SAAA,CAAC,eAChBiB,EAAUC,MAEzBiB,eAACoC,IAAI,CAACC,SAAS,SAASC,GAAI,EAAEzE,SAAA,CAAC,UACrBkB,EAAK0D,SAEf9E,cAACyE,IAAI,CAACC,SAAS,OAAOK,WAAW,OAAOJ,GAAI,EAAEzE,SAC3CkB,EAAKF,qBAMf,E,yBCzBU8D,MAzCQlF,IAAmB,IAAlB,SAAEM,GAAUN,EAClC,MAAM,KAAEsB,GAAS6D,cAEjB,OACEjF,cAACkF,IAAc,CAAAhF,SACZE,GACCA,EAAS+E,KAAI,CAAC9E,EAAGC,IACf+B,eAAA,OAAK+C,MAAO,CAAEC,QAAS,QAASnF,SAAA,EAC5BS,EAAaP,EAAUC,EAAGC,EAAGc,EAAKV,MAClCG,EAAcT,EAAUE,EAAGc,EAAKV,OAChCV,cAACsF,IAAO,CAACC,MAAOlF,EAAEI,OAAOS,KAAMsE,UAAU,eAAeC,UAAQ,EAAAvF,SAC9DF,cAAC+D,IAAM,CACLY,GAAG,MACHL,GAAI,EACJpB,KAAK,KACLwC,OAAO,UACPxE,KAAMb,EAAEI,OAAOS,KACfiD,IAAK9D,EAAEI,OAAO2D,QAIpBpE,cAAA,QACEoF,MAAO,CACLO,gBAAgB,GAADC,OACbvF,EAAEI,OAAOC,MAAQU,EAAKV,IAAM,UAAY,WAE1CmF,WAAY1F,EAAmBC,EAAUC,EAAGC,EAAGc,EAAKV,KACpDoF,UAAWhF,EAAWV,EAAUC,EAAGC,EAAGc,EAAKV,KAAO,EAAI,GACtDsD,aAAc,OACd+B,QAAS,WACTC,SAAU,OACV9F,SAEDG,EAAE4F,YA1B+B5F,EAAEK,QA8B7B,E,kBCkONwF,MAhRMpG,IAA2B,IAA1B,iBAAEqG,GAAkBrG,EACxC,MAAOsG,GAAUC,mBAAS,CACxB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,eACA,eACA,qBACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,eACA,eACA,qBACA,qBACA,eACA,eACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,eACA,eACA,qBACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,wBAIIC,EAAaC,GAAkBF,oBAAS,GAO9C,OACErG,cAAA,OAAKoF,MAAO,CAAEO,gBAAiB,WAAYzF,SACxCoG,GACCtG,cAAAsC,WAAA,CAAApC,SACGkG,EAAOjB,KAAI,CAACqB,EAAOC,IAClBzG,cAAA,QAEEoF,MAAO,CAAEM,OAAQ,UAAWgB,YAAa,QACzCnE,QAASA,IAbAiE,KACnBL,EAAiBK,GACjBD,GAAe,EAAM,EAWII,CAAYH,GAAOtG,SAEjCsG,GAJIC,QAST,E,SC9QK,MAA0B,gC,SCiC1BG,MA9BO9G,IAAsC,IAArC,KAAEsB,EAAI,eAAEyF,EAAc,MAAEC,GAAOhH,EACpD,OACEuC,eAAC0E,IAAK,CACJC,GAAI,EACJC,GAAI,EACJjD,aAAa,KACb3D,EAAG,EACH6G,GAAI,EACJC,QAAQ,QACRzC,SAAU,GACV0C,YAAY,SACZ1B,OAAO,UACPnD,QAASsE,EACTzB,MAAO,CACLiC,WAAY,4DACZC,UAAW,mCAEbC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","file":"static/js/9.91baf8eb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nfunction MataData({ title }) {\r\n  return (\r\n    <Helmet>\r\n      <title>{title}</title>\r\n    </Helmet>\r\n  );\r\n}\r\n\r\nexport default MataData;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n\n\n\nexport const createdAt = (user) => {\nconst createdAt = new Date(user.createdAt);\nconst options = {\n  year: \"numeric\",\n  month: \"2-digit\",\n  day: \"2-digit\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  hour12: true,\n  timeZone: \"Asia/Kolkata\",\n};\n\nconst formatter = new Intl.DateTimeFormat(\"en-IN\", options);\nconst formattedDate = formatter.format(createdAt);\nreturn formattedDate;\n  \n}","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n \n  ModalBody,\n  ModalCloseButton,\n\n  useDisclosure,\n  IconButton,\n  Text,\n\n} from \"@chakra-ui/react\";\nimport { Flex, Avatar } from \"@chakra-ui/react\";\nimport { createdAt } from \"../../config/ChatLogics\";\nimport \"./SideDrawer.css\";\n\n\nconst ProfileModal = ({ user, children }) => {\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\nreturn (\n  <>\n    {children ? (\n      <span onClick={onOpen}>{children}</span>\n    ) : (\n      <IconButton\n        icon={<ViewIcon  />}\n        onClick={onOpen}\n        bg=\"red\"\n        color=\"white\"\n        pos=\"absolute\"\n        top={4}\n        right={4}\n        className=\"close-button\"\n      />\n    )}\n    <Modal size=\"2xl\" onClose={onClose} isOpen={isOpen} isCentered>\n      <ModalOverlay />\n      <ModalContent\n        h=\"auto\"\n        w=\"auto\"\n        bg=\"#28293D\"\n        color=\"#F2F2F5\"\n        pt={4}\n        pb={4}\n      >\n        <ModalCloseButton color=\"#F2F2F5\" pos=\"absolute\" top={4} right={4} />\n        <ModalBody d=\"flex\" alignItems=\"center\" justifyContent=\"center\" className=\"profileModel\">\n          <Avatar\n            size=\"xl\"\n            borderRadius=\"lg\"\n            width=\"200px\"\n            height=\"200px\"\n            src={user.pic}\n            alt={user.name}\n            mr={8}\n          />\n          <Flex direction=\"column\" alignItems=\"flex-start\">\n            <Text fontSize=\"1.2rem\" mt={2}>\n              ID: {user._id.toString().substring(0, 9)}\n            </Text>\n            <Text fontSize=\"1.2rem\" mt={2}>\n              Created At: {createdAt(user)}\n            </Text>\n            <Text fontSize=\"1.2rem\" mt={2}>\n              Email: {user.email}\n            </Text>\n            <Text fontSize=\"2rem\" fontWeight=\"bold\" mt={4}>\n              {user.name}\n            </Text>\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  </>\n);\n\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#4D0099\" : \"#6600CC\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import React, { useState } from \"react\";\r\n\r\nconst EmojiOptions = ({ handleEmojiClick }) => {\r\n  const [emojis] = useState([\r\n    \"😀\",\r\n    \"😃\",\r\n    \"😄\",\r\n    \"😁\",\r\n    \"😆\",\r\n    \"😅\",\r\n    \"😂\",\r\n    \"🤣\",\r\n    \"😊\",\r\n    \"😇\",\r\n    \"🙂\",\r\n    \"🙃\",\r\n    \"😉\",\r\n    \"😌\",\r\n    \"😍\",\r\n    \"🥰\",\r\n    \"😘\",\r\n    \"😗\",\r\n    \"😙\",\r\n    \"😚\",\r\n    \"😋\",\r\n    \"😛\",\r\n    \"😝\",\r\n    \"😜\",\r\n    \"🤪\",\r\n    \"🤨\",\r\n    \"🧐\",\r\n    \"🤓\",\r\n    \"😎\",\r\n    \"🤩\",\r\n    \"🥳\",\r\n    \"😏\",\r\n    \"😒\",\r\n    \"😞\",\r\n    \"😔\",\r\n    \"😟\",\r\n    \"😕\",\r\n    \"🙁\",\r\n    \"😣\",\r\n    \"😖\",\r\n    \"😫\",\r\n    \"😩\",\r\n    \"🥺\",\r\n    \"😢\",\r\n    \"😭\",\r\n    \"😤\",\r\n    \"😠\",\r\n    \"😡\",\r\n    \"🤬\",\r\n    \"🤯\",\r\n    \"😳\",\r\n    \"🥵\",\r\n    \"🥶\",\r\n    \"😱\",\r\n    \"😨\",\r\n    \"😰\",\r\n    \"😥\",\r\n    \"😓\",\r\n    \"🤗\",\r\n    \"🤔\",\r\n    \"🤭\",\r\n    \"🤫\",\r\n    \"🤥\",\r\n    \"😶\",\r\n    \"😐\",\r\n    \"😑\",\r\n    \"😬\",\r\n    \"🙄\",\r\n    \"😯\",\r\n    \"😦\",\r\n    \"😧\",\r\n    \"😮\",\r\n    \"😲\",\r\n    \"🥱\",\r\n    \"😴\",\r\n    \"🤤\",\r\n    \"😪\",\r\n    \"😵\",\r\n    \"🤐\",\r\n    \"🥴\",\r\n    \"🤢\",\r\n    \"🤮\",\r\n    \"🤧\",\r\n    \"😷\",\r\n    \"🤒\",\r\n    \"🤕\",\r\n    \"🤑\",\r\n    \"🤠\",\r\n    \"😈\",\r\n    \"👿\",\r\n    \"👹\",\r\n    \"👺\",\r\n    \"🤡\",\r\n    \"💩\",\r\n    \"👻\",\r\n    \"💀\",\r\n    \"☠️\",\r\n    \"👽\",\r\n    \"👾\",\r\n    \"🤖\",\r\n    \"✌️\",\r\n    \"☀️\",\r\n    \"⚽️\",\r\n    \"❤️\",\r\n    \"⚾️\",\r\n    \"⛄️\",\r\n    \"⛵️\",\r\n    \"🚢\",\r\n    \"✈️\",\r\n    \"🚀\",\r\n    \"🚆\",\r\n    \"🚗\",\r\n    \"🚲\",\r\n    \"🛴\",\r\n    \"🛵\",\r\n    \"🏍️\",\r\n    \"🚔\",\r\n    \"🚒\",\r\n    \"🚑\",\r\n    \"🚒\",\r\n    \"🚓\",\r\n    \"🚨\",\r\n    \"🚦\",\r\n    \"🛑\",\r\n    \"🚧\",\r\n    \"🛣️\",\r\n    \"🗻\",\r\n    \"⛰️\",\r\n    \"🏔️\",\r\n    \"🌋\",\r\n    \"🏕️\",\r\n    \"🏖️\",\r\n    \"🏜️\",\r\n    \"🏝️\",\r\n    \"🏞️\",\r\n    \"🏟️\",\r\n    \"🏛️\",\r\n    \"🏗️\",\r\n    \"🏘️\",\r\n    \"🏚️\",\r\n    \"🏠\",\r\n    \"🏡\",\r\n    \"🏢\",\r\n    \"🏣\",\r\n    \"🏥\",\r\n    \"🏦\",\r\n    \"🏨\",\r\n    \"🏩\",\r\n    \"🏪\",\r\n    \"🏫\",\r\n    \"🏬\",\r\n    \"🏭\",\r\n    \"🏯\",\r\n    \"🏰\",\r\n    \"💒\",\r\n    \"🗼\",\r\n    \"🗽\",\r\n    \"⛪️\",\r\n    \"🕌\",\r\n    \"🕍\",\r\n    \"⛩️\",\r\n    \"🕋\",\r\n    \"🛕️\",\r\n    \"🛖️\",\r\n    \"🛗️\",\r\n    \"🛚️\",\r\n    \"🛛️\",\r\n    \"🛜️\",\r\n    \"🛝️\",\r\n    \"🛞️\",\r\n    \"🛟️\",\r\n    \"🛠️\",\r\n    \"🛡️\",\r\n    \"🛢️\",\r\n    \"🛣️\",\r\n    \"🛤️\",\r\n    \"🛥️\",\r\n    \"🛩️\",\r\n    \"🛫\",\r\n    \"🛬\",\r\n    \"🛰️\",\r\n    \"🛳️\",\r\n    \"🛴\",\r\n    \"🛵\",\r\n    \"🏍️\",\r\n    \"🚔\",\r\n    \"🚒\",\r\n    \"🚑\",\r\n    \"🚒\",\r\n    \"🚓\",\r\n    \"🚨\",\r\n    \"🚦\",\r\n    \"🛑\",\r\n    \"🚧\",\r\n    \"🛣️\",\r\n    \"🗻\",\r\n    \"⛰️\",\r\n    \"🏔️\",\r\n    \"🌋\",\r\n    \"🏕️\",\r\n    \"🏖️\",\r\n    \"🏜️\",\r\n    \"🏝️\",\r\n    \"🏞️\",\r\n    \"🏟️\",\r\n    \"🏛️\",\r\n    \"🏗️\",\r\n    \"🏘️\",\r\n    \"🏚️\",\r\n    \"🏠\",\r\n    \"🏡\",\r\n    \"🏢\",\r\n    \"🏣\",\r\n    \"🏥\",\r\n    \"🏦\",\r\n    \"🏨\",\r\n    \"🏩\",\r\n    \"🏪\",\r\n    \"🏫\",\r\n    \"🏬\",\r\n    \"🏭\",\r\n    \"🏯\",\r\n    \"🏰\",\r\n    \"💒\",\r\n    \"🗼\",\r\n    \"🗽\",\r\n    \"⛪️\",\r\n    \"🕌\",\r\n    \"🕍\",\r\n    \"⛩️\",\r\n    \"🕋\",\r\n    \"🛕️\",\r\n    \"🛖️\",\r\n    \"🛗️\",\r\n    \"🛚️\",\r\n    \"🛛️\",\r\n    \"🛜️\",\r\n    \"🛝️\",\r\n    \"🛞️\",\r\n    \"🛟️\",\r\n    \"🛠️\",\r\n  ]);\r\n \r\n\r\n const [showOptions, setShowOptions] = useState(true); // State variable to control visibility\r\n\r\n  const handleClick = (emoji) => {\r\n    handleEmojiClick(emoji);\r\n    setShowOptions(false); // Hide the emoji options after selection\r\n  };\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#28293D\" }}>\r\n      {showOptions && ( // Render the emoji options only when showOptions is true\r\n        <>\r\n          {emojis.map((emoji, index) => (\r\n            <span\r\n              key={index}\r\n              style={{ cursor: \"pointer\", marginRight: \"10px\" }}\r\n              onClick={() => handleClick(emoji)}\r\n            >\r\n              {emoji}\r\n            </span>\r\n          ))}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmojiOptions;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/img.572edcce.jpg\";","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n      style={{\n        background: \"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%)\", \n        boxShadow: \"0px 4px 10px rgba(0, 0, 0, 0.2)\", \n      }}\n      _hover={{\n        background: \"#4D0099\", \n        transform: \"scale(1.2)\", \n     marginLeft: \"5px\",\n      }}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\n\nconst UserListItem = ({user, handleFunction }) => {\n\n\n  return (\n    <Box\n \n    \n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#555770\"\n      _hover={{\n        bg: \"#6600CC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"#F2F2F5\" \n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport \"./SideDrawer.css\";\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const [isUserList , setUserList] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setUserList(true);\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n         \"Content-type\" : \"appilication/json\",\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n setUserList(false);\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n     \n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n       \n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(user1._id);\n    console.log(selectedChat._id); \n\n    try {\n      setLoading(true);\n      const config = { headers : {\"Content-type\" : \"application/json\"} };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        }, \n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"#28293D\" overflowY=\"scroll\"\n        height=\"60%\"\n        >\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work Sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n            background=\"#1C1C28\"\n            color=\"#F2F2F5\"\n            p={2}\n            mb={3}\n            borderRadius=\"md\"\n            boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n            textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={1}\n                bg=\"#555770\"\n                color=\"#F2F2F5\"\n                _placeholder={{\n                  color: \"#F2F2F5\",\n                }}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                d=\"flex\"\n                fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n                color=\"#E4E4EB\"\n                background=\"linear-gradient(145.51deg, #AC5DD9 7.21%, #004FC4 94.47%);\n\"\n                textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n                boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n                _hover={{\n                  bg: \"#6600CC\",\n                }}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                bg=\"#555770\"\n                color=\"#F2F2F5\"\n                _placeholder={{\n                  color: \"#F2F2F5\",\n                }}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n             isUserList && searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={() => handleRemove(user)}\n              d=\"flex\"\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n              color=\"#E4E4EB\"\n              background=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%);\n\"\n              textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n              boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n              _hover={{\n                transform: \"scale(1.1)\",\n                bg: \"#6600CC\",\n              }}\n            >\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/react\";\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\nimport Send from \"@mui/icons-material/Send\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport EmojiOptions from \"./EmojiOptions\";\nimport animationData from \"../animations/typing.json\";\nimport backgroundImage from \"../img/img.jpg\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";\n// const ENDPOINT = window.location.hostname === \"localhost\"\n//   ? \"http://localhost:5000\"\n//   : \"https://chat-mind-production.up.railway.app/\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const [showEmojiOptions, setShowEmojiOptions] = useState(false);\n\n  const handleEmojiClick = (emoji) => {\n    setNewMessage((prevMessage) => prevMessage + emoji);\n  };\n\n  const handleToggleEmojiOptions = () => {\n    setShowEmojiOptions((prevState) => !prevState);\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  // sendMessage is used to send message on clicking send button\n  const sendMessage = async (event) => {\n    if (newMessage && event.key === \"Enter\") {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n          },\n        };\n\n        setNewMessage(\"\");\n\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            fontWeight={800}\n            textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              bg=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%);\"\n              color=\"#F2F2F5\"\n              _hover={{ bg: \"#6600CC\" }}\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg={`url(${backgroundImage})`}\n            bgSize=\"cover\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n\n              <InputGroup>\n                <Input\n                  variant=\"filled\"\n                  bg=\"#28293D\"\n                  placeholder=\"Enter a message..\"\n                  value={newMessage}\n                  color=\"#F2F2F5\"\n                  _placeholder={{ color: \"#F2F2F5\" }}\n                  _hover={{ bg: \"#1C1C28\" }}\n                  onChange={typingHandler}\n                  _focus={{\n                    bg: \"#1C1C28\",\n                  }}\n                  pr=\"4rem\"\n                  pb=\"0\"\n                />\n                <InputRightElement width=\"4rem\">\n                  <IconButton\n                    icon={<EmojiEmotionsIcon />}\n                    onClick={handleToggleEmojiOptions}\n                    aria-label=\"Open Emoji Options\"\n                    bg=\"none\"\n                    _hover={{ bg: \"none\" }}\n                    color=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%)\"\n                  />\n                  <IconButton\n                    icon={<Send />}\n                    onClick={sendMessage}\n                    aria-label=\"Send Message\"\n                    bg=\"none\"\n                    _hover={{ bg: \"none\" }}\n                    color=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%)\"\n                  />\n                </InputRightElement>\n              </InputGroup>\n              {showEmojiOptions && (\n                <EmojiOptions handleEmojiClick={handleEmojiClick} />\n              )}\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"#28293D\"\n     \n      color=\"#F2F2F5\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderColor=\"#555770\"\n      borderWidth=\"1px\"\n     \n\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/react\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack bg=\"#28293D\">\n      {[...Array(12)].map((_, index) => (\n        <Skeleton key={index} height=\"45px\" />\n      ))}\n    </Stack>\n  );\n};\n\n\n\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport \"./SideDrawer.css\";\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const {  chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n      \"Content-type\" : \"appilication/json\"\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n     \n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n   \n    if (selectedUsers.length <= 2) {\n      toast({\n        title: \"Please select more than 2 users\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n\n      return;\n    }\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n     \n  \n    try {\n      const config = { headers: { \"Content-type\": \"application/json\" } };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered\n      className=\"modal\"\n      >\n        <ModalOverlay />\n        <ModalContent bg=\"#28293D\">\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work Sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n            background=\"#1C1C28\"\n            color=\"#F2F2F5\"\n            p={2}\n            mb={3}\n            borderRadius=\"md\"\n            textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n            boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n            className=\"modalHeader\"\n          >\n            Create Group Chat\n          </ModalHeader>\n\n          <ModalCloseButton color=\"#F2F2F5\" />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                bg=\"#555770\"\n                color=\"#F2F2F5\"\n                _placeholder={{\n                  color: \"#F2F2F5\",\n                }}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                bg=\"#555770\"\n                color=\"#F2F2F5\"\n                _placeholder={{\n                  color: \"#F2F2F5\",\n                }}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>  \n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              d=\"flex\"\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n              onClick={handleSubmit}\n              color=\"#E4E4EB\"\n              background=\"linear-gradient(147.14deg, #3E7BFA 6.95%, #6600CC 93.05%);\n\"\n              textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n              boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n              _hover={{\n                transform: \"scale(1.1)\",\n                bg: \"#6600CC\",\n              }}\n            >\n              Create Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport \"./styles.css\"\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"#28293D\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"2px\"\n      borderColor=\"#555770\"\n    >\n      <Box\n        pb={1}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work Sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"#E4E4EB\"\n        borderRadius=\"md\"\n        boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n        background=\"#1C1C28\"\n      >\n        <Box\n          fontWeight=\"bold\"\n          textShadow=\"3px 3px 6px rgba(0, 0, 0, 0.5)\"\n          className=\"heading\"\n        >\n          All Chats\n        </Box>\n        <GroupChatModal className=\"modal\">\n          <Button\n            className=\"chatBtn\"\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n            color=\"#E4E4EB\"\n            bg=\"linear-gradient(147.14deg, #FF3B3B 6.95%, #6600CC 93.05%)\"\n            textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n            boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n            _hover={{\n              // Add hover effect styles\n              transform: \"scale(1.1)\",\n              bg: \"#6600CC\",\n            }}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      ;\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        background=\"#1C1C28\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n        boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#6600CC\" : \"#555770\"}\n                color={selectedChat === chat ? \"#E4E4EB\" : \"#F2F2F5\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n                boxShadow=\"2px 2px 4px rgba(0, 0, 0, 0.5)\"\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport \"./SideDrawer.css\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon ,  DeleteIcon, EditIcon, ExternalLinkIcon, SettingsIcon  } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport { createdAt } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n    setIsAuth,\n  } = ChatState();\n\n  \n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    setIsAuth(false);\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n;\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n   // handle the access chat function \n  const accessChat = async (userId) => {\n \n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n       \n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"#28293D\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n        borderColor=\"#555770\"\n        color=\"#EBEBF0\"\n      >\n        <Tooltip\n          label=\"Search Users to chat\"\n          hasArrow\n          placement=\"bottom-end\"\n          bgGradient=\"linear(to-r, #3E7BFA, #6600CC)\"\n          color=\"#FFFFFF\"\n          _hover={{\n            bg: \"#555770\",\n            color: \"#FFFFFF\",\n          }}\n        >\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            _hover={{\n              bg: \"#555770\",\n            }}\n            _active={{\n              bg: \"transparent\",\n              color: \"#FFFFFF\",\n            }}\n          >\n            <i className=\"fas fa-search\"></i>\n            <Text\n              d={{ base: \"none\", md: \"flex\" }}\n              px={4}\n              _hover={{\n                bg: \"#555770\",\n              }}\n            >\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n\n        <Text\n        className =\"logo_text\"\n          fontSize=\"2.5rem\"\n          fontWeight=\"bold\"\n          textTransform=\"uppercase\"\n          display=\"inline-block\"\n          bgGradient=\"linear(to-r, #FF3B3B, #6600CC)\"\n          bgClip=\"text\"\n          cursor=\"pointer\"\n          textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\" // Update the shadow effect\n        >\n          ChatSphere\n        </Text>\n\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2} bg=\"#28293D\" color=\"white\">\n              {!notification.length && <MenuItem>No New Messages</MenuItem>}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"transparent\" _hover={{ bg: \"#555770\" }}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n              <ChevronDownIcon _hover={{ color: \"#6600CC\" }} />\n            </MenuButton>\n            <MenuList bg=\"#28293D\" border=\"none\" shadow=\"none\" p={0}>\n              <Box p={2} textAlign=\"center\">\n                <Avatar size=\"md\" name={user.name} src={user.pic} mb={2} />\n                <Box fontSize=\"sm\">\n                  <strong>ID:</strong> {user._id.toString().substring(0 ,8)} <br />\n                  <strong>Name:</strong> {user.name} <br />\n                  <strong>Email:</strong> {user.email} <br />\n                  <strong>Created At:</strong> {createdAt(user)} <br />\n                </Box>\n              </Box>\n              <MenuDivider />\n              <ProfileModal user={user}>\n                <MenuItem _hover={{ bg: \"#555770\" }}>\n                  <EditIcon mr={2} boxSize={4} />\n                  Profile\n                </MenuItem>\n              </ProfileModal>\n              <MenuItem _hover={{ bg: \"#555770\" }}>\n                <DeleteIcon mr={2} boxSize={4} />\n                Delete Account\n              </MenuItem>\n\n              <MenuItem _hover={{ bg: \"#555770\" }}>\n                <SettingsIcon mr={2} boxSize={4} />\n                Settings\n              </MenuItem>\n              <MenuItem _hover={{ bg: \"#555770\" }} onClick={logoutHandler}>\n                <ExternalLinkIcon mr={2} boxSize={4} />\n                Logout\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent bg=\"#28293D\" color=\"#28293D\">\n          <DrawerHeader\n        \n            borderBottomWidth=\"1px\"\n            fontWeight=\"bold\"\n            textTransform=\"uppercase\"\n            display=\"inline-block\"\n            bgGradient=\"linear(to-r, #FF3B3B, #6600CC)\"\n            bgClip=\"text\"\n            cursor=\"pointer\"\n            textShadow=\"2px 2px 8px rgba(0, 0, 0, 0.6)\"\n            textAlign=\"center\"\n            fontSize=\"2rem\"\n          >\n            ChatSphere\n          </DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                color=\"#F2F2F5\"\n                bg=\"#555770\"\n              />\n              <Button\n                onClick={handleSearch}\n                color=\"#F2F2F5\"\n                bg=\"#555770\"\n                _hover={{\n                  bg: \"#6600CC\",\n                  color: \"#F2F2F5\",\n                  boxShadow: \"2px 2px 8px rgba(0, 0, 0, 0.6)\",\n                }}\n                _active={{\n                  bg: \"#6600CC\",\n                  color: \"#F2F2F5\",\n                  boxShadow: \"none\",\n                }}\n                p={3}\n              >\n                Go\n              </Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((myuser) => (\n                <UserListItem\n                  key={myuser._id}\n                  user={myuser}\n                  handleFunction={() => accessChat(myuser._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState  } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport MetaData from \"../components/layouts/MetaData/Metadata\";\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false); \n  const { user  } = ChatState();\n;\n\n\n  return (\n    <>\n      <MetaData title=\"Chat\" />\n      <div style={{ width: \"100%\" }}>\n        {user && <SideDrawer />}\n        <Box\n          d=\"flex\"\n          justifyContent=\"space-between\"\n          w=\"100%\"\n          h=\"91.5vh\"\n          p=\"10px\"\n        >\n          {user && <MyChats fetchAgain={fetchAgain} />}\n          {user && (\n            <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n          )}\n        </Box>\n      </div>\n    </>\n  );\n};\n\nexport default Chatpage;\n"],"sourceRoot":""}